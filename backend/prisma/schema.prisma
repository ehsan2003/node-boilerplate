// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  lastName    String
  phoneNumber String    @unique
  password    String
  role        Role
  deletedAt   DateTime?
  Student     Student?
  Teacher     Teacher?
  logins      Login[]
}

enum Role {
  Teacher
  Student
}

model Student {
  userId     String       @id @default(cuid())
  grade      Int
  context    Context
  password   String
  exams      Exam[]
  user       User         @relation(fields: [userId], references: [id])
  ExamResult ExamResult[]
}

enum Context {
  Mathematics
  Science
  Humanism
}

model Teacher {
  userId   String    @id @default(cuid())
  user     User      @relation(fields: [userId], references: [id])
  isAdmin  Boolean
  subjects Subject[]
}

model Subject {
  id         String    @id @default(uuid())
  name       String
  multiplier Float
  teachers   Teacher[]
  Pdf        Pdf[]
}

model Pdf {
  id                String       @id @default(uuid())
  name              String
  subject           Subject      @relation(fields: [subjectId], references: [id])
  subjectId         String
  grade             Int
  defaultMultiplier Float
  ordering          Float
  answerLink        String?
  mainPdf           String?
  exams             Exam[]
  time              Int
  ExamResult        ExamResult[]
  ExamPdf           ExamPdf[]
}

model Exam {
  id       String       @id @default(uuid())
  date     DateTime
  students Student[]
  pdfs     Pdf[]
  results  ExamResult[]
  ExamPdf  ExamPdf[]
}

model ExamPdf {
  pdfId  String
  examId String
  multiplier Float
  exam   Exam   @relation(fields: [examId], references: [id])
  pdf    Pdf    @relation(fields: [pdfId], references: [id])

  @@id(fields: [pdfId, examId])
}

model ExamResult {
  exam      Exam    @relation(fields: [examId], references: [id])
  examId    String
  student   Student @relation(fields: [studentId], references: [userId])
  studentId String
  score     Float
  pdf       Pdf     @relation(fields: [pdfId], references: [id])
  pdfId     String

  @@id([examId, studentId, pdfId])
}

model Login {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  expiresAt DateTime
  date      DateTime
  revokedAt DateTime?
}
